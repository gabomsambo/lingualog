export interface GrammarSuggestion {
  id?: string | null; // Optional, can be generated on frontend if not from API
  original: string;
  corrected: string; // API uses 'corrected'
  note: string;      // API uses 'note' for explanation
  dismissed?: boolean; // Added for UI state
}

export interface NewWord {
  id?: string; // This could be an ID generated by the AI feedback, or a temporary frontend ID
  db_id?: string; // ID from the user_vocabulary table, if saved
  term: string;
  pos?: string;
  definition?: string;
  reading?: string;
  example?: string;
  proficiency?: string;
  saved?: boolean; // Is this word saved to the user's vocabulary list?
}

export interface Rubric {
  complexity: number;
  grammar: number;
  vocabulary: number;
}

export interface Entry {
  id?: string;                // from DB
  user_id?: string;           // from DB
  content: string;           // Changed from original_text to match API output and EntryViewer prop
  title?: string;             // title of the entry
  language?: string;          // language of the entry
  languageCode?: string;      // Added e.g. "en", "ja"
  languageEmoji?: string;     // Added e.g. "ðŸ‡¬ðŸ‡§", "ðŸ‡¯ðŸ‡µ"
  created_at?: string;        // from DB
  updated_at?: string;        // from DB
  is_favorite?: boolean;      // from DB
  tags?: string[];            // Added to match backend and usage in page.tsx

  // Fields from Gemini API analysis
  translation: string;
  explanation?: string;       // Overall explanation for the entry's grammar/structure
  rewritten_text?: string;    // The "Je voudrais une glace vanille." example
  score: number;              // Overall fluency score (0-100)
  tone: "Reflective" | "Confident" | "Neutral" | string; // Allow other tones or keep as enum
  rubric?: Rubric;             // Detailed scores for grammar, vocab, complexity
  grammar_suggestions?: GrammarSuggestion[];
  new_words?: NewWord[];
}
